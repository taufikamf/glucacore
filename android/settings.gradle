rootProject.name = 'glucacore'

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../gradle/libs.versions.toml")))
    }
  }
}

apply from: new File(["node", "--print", "require.resolve('expo/package.json')"].execute(null, rootDir).text.trim(), "../scripts/autolinking.gradle");
useExpoModules()

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
applyNativeModulesSettingsGradle(settings)

include ':app'
includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile())

// Add explicit include for missing modules
def nodeModulesPath = rootProject.projectDir.getParentFile().toPath().resolve("node_modules").toString()

// Include the expo-dev-menu-interface if it exists
def devMenuInterfacePath = new File("$nodeModulesPath/expo-dev-menu-interface")
if (devMenuInterfacePath.exists()) {
  include ':expo-dev-menu-interface'
  project(':expo-dev-menu-interface').projectDir = devMenuInterfacePath.getAbsoluteFile()
}

// Include any other missing modules
["expo-dev-client", "expo-dev-launcher", "expo-dev-menu", "expo-dev-menu-interface"].each { moduleName ->
  def modulePath = new File("$nodeModulesPath/$moduleName/android")
  if (modulePath.exists()) {
    include ":$moduleName"
    project(":$moduleName").projectDir = modulePath
  }
}
